---
format: 
  revealjs:
    overview: true
    hash-type: number
    transition: fade
    auto-stretch: false
    height: 900
    width: 1600
    logo: https://www.rstudio.com/assets/img/posit-logo-fullcolor-TM.svg
    footer: <a href="https://colorado.posit.co/rsc/publishing-to-connect/">https://colorado.posit.co/rsc/publishing-to-connect/</a>
    slide-number: c/t
    link-external-newwindow: true
    theme: styles.scss
engine: knitr
---

## {#TitleSlide data-menu-title="Title Slide" background-color="#419599" background-image="images/posit-wallpaper-4.jpg" background-position="left" background-size="contain"}

:::{style="position: absolute; width: 500px; top: 23%; right: 2%; text-align: right;"}
[Getting the Car on the Track: publishing to Connect]{style="color: #ffffff; font-size: 3rem;"}
:::

::: footer
[You are sneaky!]{style="color: transparent;"}
:::

# Review

# The philosophy

- Code-first 
- Use code to do analysis and build things 

# The mental model

- Building and racing cars

:::{.incremental}

- R and Python are your tools to build with - build and share whatever you want
- Workbench is your main garage where you use and organize the tools to build and test cars
- Connect is the racetrack where you use and present your cars
- Package Manager is the tool distribution hub that ensures consistent tools in all places

:::

# How does all of this come together?

# {background-color="#303436" background-image="images/concept-map.png" background-position="top" background-size="contain"}

# Let's inspect the garage, racetrack, and tool supplier some more

## {background-color="#333333" background-image="images/bruce-mars-garage.jpg" background-size="contain"}

:::{style="position: absolute; width: 40%; top: -42px; right: 88px; text-align: left;"}
[**Workbench - garage where you write code that retrieves data, preps data, conducts analysis, builds reports, APIs, apps**]{style="color: #333333; font-size: 2rem;"}
:::

:::{style="position: absolute; bottom: 10px; left: 42%;"}
[Photo by <a href="https://unsplash.com/@brucemars?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">bruce mars</a> on <a href="https://unsplash.com/photos/eDJHOMSZrT8?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>]{style="color: #fff; font-size: 1rem;"}
:::

---

:::{.img-center}
<img src="images/pwb.png" class="img-center">
:::

---

## {background-color="#333333" background-image="images/spencer-davis-track.jpg" background-size="contain"}

:::{style="position: absolute; width: 50%; top: -42px; right: 58px; text-align: left;"}
[**Connect - racetrack where you make your race cars, i.e., apps and data products, available to other people, includes its own onsite garage that can rebuild your products on a schedule**]{style="color: #333333; font-size: 2rem;"}
:::

:::{style="position: absolute; bottom: 10px; left: 42%;"}
[Photo by <a href="https://unsplash.com/it/@spencerdavis?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Spencer Davis</a> on <a href="https://unsplash.com/photos/ISkIIiYm0uQ?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>]{style="color: #fff; font-size: 1rem;"}
:::

---

:::{.img-center}
<img src="images/pct.png" class="img-center">
:::

---

:::{.incremental}
-  Publish to Connect with an easy button, or git-backed, or via its API
-  Single node or in cluster
-  Bare or in a docker container
-  On-prem or a cloud server provider like AWS, Azure, Google Cloud
-  On remote resource managers like Kubernetes or Slurm
-  Your own enterprise authentication
:::

---

:::{.incremental}
-  Monitor and control server activity as an admin
-  Connect to on-prem or remote data sources
-  Host reports, data, APIs, apps, and more
-  Schedule and run data prep scripts
-  Schedule, run, and rebuild reports
-  Email stakeholders as reports are rerun
:::

## {background-color="#333333" background-image="images/simon-kadula-factory.jpg" background-size="contain"}

:::{style="position: absolute; width: 50%; top: -62px; right: 48px; text-align: left;"}
[**Package Manager - the remote tool factory that supplies the same tools to your workshop and racetrack**]{style="color: #333333; font-size: 2rem;"}
:::

:::{style="position: absolute; bottom: 10px; left: 10px;"}
[Photo by <a href="https://unsplash.com/@simonkadula?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Simon Kadula</a> on <a href="https://unsplash.com/photos/8gr6bObQLOI?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>]{style="color: #fff; font-size: 1rem;"}
:::

---

:::{.img-center}
<img src="images/ppm.png" class="img-center">
:::

---

- Bring the packages behind your firewall 
- Public R and Python packages
- Your own private packages
- Pre-built binary versions from our sync service
- Curated subsets of packages (R now, Python coming soon)
- Validated sets (you validate)
- Block access to vulnerable packages (coming soon)

## Publishing to Connect

:::.nice-block
You have built your race car in Workbench. Now it's time to [get it on the racetrack, Connect](https://solutions.posit.co/operations/deploy-methods/).
:::

:::{.incremental}
-  Push-button
-  Git-backed
-  API
:::

## Push-button publishing

First, let's look at global options and

 - turn on diagnostics  
 - connect a publishing account  

---
 
### Push-button publishing 
 
:::{.incremental}
- Driving the race car from your garage to the racetrack
- When you want to publish content directly from your development environment
- A reproducible bundle with code and a list of dependencies is automatically created
- That bundle is published to Connect
	- sidebar: Where does Connect get its packages from?
	- Connect does not get packages from your laptop or Workbench
	- Connect gets packages from where it is configured to get them from, OR
	- from where you got them from
- Available in the RStudio IDE and Jupyter Notebooks
:::

---
 
### Key publication processes during push-button deployments

Demo on into-the-unknown.qmd with push-button  

In the "deploy" tab you will see:  

:::{.incremental}
- `rsconnect::deployApp()`
- R version matching
- Validating R library
- Repository URLs
- Install packages - symlinked from cache
- Connecting to session
- Rendering
:::

---

### Sneak peek at API publishing

demo on into-the-unknown.qmd with test-delpoy.R

:::{.incremental}
- if it's a single quarto doc, [add empty _quarto.yml](https://docs.posit.co/connect/user/publishing-cli-quarto/#limitations) to directory
- quarto = quarto::quarto_path() or `which quarto` in your terminal
- rsconnect::deployApp()
- R version matching
- Validating R library
- Repository URLs
- Install packages - symlinked from cache
- Connecting to session
- Rendering
:::


## Git-backed publishing 

[Let Connect publish for you](https://docs.posit.co/connect/user/git-backed/#git-backed), pulling directly from your git repo!

:::{.incremental}
- Create and commit a manifest file
	- Run `rsconnect::writeManifest()` from within your project directory
	- use `rsconnect` version 0.8.15 or higher, `packageVersion("rsconnect")`
	- Use `appPrimaryDoc` to specify file to deploy, `rsconnect::writeManifest(appPrimaryDoc = "report.Rmd")`
	- For html and Rmd books, `rsconnect::writeManifest(appPrimaryDoc = "index.html", contentCategory = "site")`
	- [For python](https://docs.posit.co/connect/user/git-backed/#creating-the-manifest-file-from-python) 
	- Commit manifest to your local Git, push to the remote Git repo
- Link Posit Connect to the Git repository
:::

## API / CI publishing 
  
[API publishing](https://solutions.posit.co/operations/deploy-methods/#api-backed-publishing) is the most flexible deployment method but also requires the most setup 

- External CI/CD system pushes content updates to Connect using the API
- Benefit - add tests and other pre-deployment activities

---

Integration

- Practice of automating the integration of code changes including running tests or validations

Deployment

- Practice of automating the deployment of your code to an environment like Connect

---

### Steps to deploy:

- Use renv to maintain consistency between the development and build environments
- Create a Connect API key
- Use `rsconnect` package to register your Connect server (directly or in your yaml)
- Add your API Key and Server URL to secrets in your Github repository
- Create a `manifest.json` file
- Create your yaml in `.github/workflows/` using actions and scripts (make sure to remove your `.Rprofile`!)
- Run your deployment!

---

### Lets learn the workflow

Follow along here - [https://solutions.posit.co/operations/deploy-methods/ci-cd/github-actions/](https://solutions.posit.co/operations/deploy-methods/ci-cd/github-actions/)

## {background-color="#ABB8C3" background-image="images/carbon1.png" background-size="contain"}

## {background-color="#ABB8C3" background-image="images/carbon2.png" background-size="contain"}

## {background-color="#ABB8C3" background-image="images/carbon3.png" background-size="contain"}

## {background-color="#ABB8C3" background-image="images/carbon4.png" background-size="contain"}

## {background-color="#ABB8C3" background-image="images/carbon5.png" background-size="contain"}

--- 

### API and CI Resources  

- [GitHub Actions](https://github.com/rstudio/actions)
- [Shiny app demo](https://github.com/sol-eng/shiny-app-demo-cicd-github-actions)
- [Solutions article on GitHub actions](https://solutions.posit.co/operations/deploy-methods/ci-cd/github-actions/)
- [Python examples](https://github.com/sol-eng/python-examples/blob/main/.github/workflows/deploy.yml)
- [Workflows](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions)

# Wrapping Up

# Ways we help you

- On-prem evaluation 
- Technical Support during eval
- Architecture [best practices](https://solutions.posit.co/)
- [Posit Academy](https://posit.co/products/enterprise/academy/) is the best way to build data science skill
- After you license
	- [Technical support](https://posit.co/about/support-agreement/) included
	- [Premium Plus Support](https://posit.co/about/premium-plus-support/) available
	- [Technical Account Management](https://posit.co/about/tam-terms-of-service/) available
	- Full Service Partners can provide additional IT and education resources

# Resources

## Our bike prediction project {.smaller}

- Built in Workbench
	- `tidymodels`
	- `vetiver`
	- `pins`
- Published to Connect
	- ETL script
	- Model training
	- Comms to the database
	- API to serve the model 
	- Shiny app for end users to get predictions from the model
- [Fully documented with free code](https://solutions.posit.co/gallery/bike_predict/)
- All orchestrated and [hosted on our public Connect server](https://colorado.posit.co/rsc/bike-predict-r-dashboard/document.html)

---

![](images/bike.png){width=100%}

## Other Resources {.smaller}

- [Posit](https://posit.co)
- [All docs](https://docs.posit.co/)
- [Solutions](https://solutions.posit.co/)
- [Public Sector Cheatsheet for all links in one place](https://colorado.posit.co/rsc/public-sector-cheatsheet/)
- [Quarto](https://quarto.org) - An open-source scientific and technical publishing system
- [Shiny](https://shiny.rstudio.com/) apps for R
- [Shiny](https://shiny.rstudio.com/py/) apps for Python

Data handling

- [dtplyr](https://dtplyr.tidyverse.org/) and [data.table](https://rdatatable.gitlab.io/data.table/)
- [arrow](https://arrow.apache.org/) for [R](https://arrow.apache.org/docs/r/) and [duckdb](https://duckdb.org/) for [R](https://duckdb.org/docs/api/r.html)
- [Databases best practices](https://solutions.posit.co/connections/db/best-practices/)
- [futureverse](https://www.futureverse.org/)
- [sparklyr](https://spark.rstudio.com/)
